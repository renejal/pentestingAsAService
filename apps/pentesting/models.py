from django.db import models
from django.db.models.fields.related import ForeignKey
from apps.shopping.models import Service

from apps.base.models import BaseModel
# Create your models here.


class Category(BaseModel):
    category_name = models.CharField("category_name", max_length=50, null=False,unique=True)
    description = models.CharField('description',max_length=50)

    class Meta:
        """Meta definition for Product."""

        verbose_name = 'category'
        verbose_name_plural = 'categorys'

    def __str__(self):
        """Unicode representation of Product."""
        return self.category_name

class Attack(BaseModel):
    name=models.CharField('name attack', max_length=50,unique=True,blank=False,null=False)
    description = models.TextField('Description attack',blank=False,null=False)
    category = ForeignKey(Category,on_delete=models.CASCADE,verbose_name='category',null=False,blank=False)
    owas_id=models.IntegerField('id owas',blank=False,unique=True)
    script = models.TextField('script',null=False,blank=False)
    class Meta:
        """Meta definition for Product."""

        verbose_name = 'Attack'
        verbose_name_plural = 'Attacks'
   
    def __str__(self):
        return self.name
    

class Package(BaseModel):
    packages = models.ManyToManyField(Attack)
    class Meta:
        """Meta definition for Product."""

        verbose_name = 'Package'
        verbose_name_plural = 'Package'
    def __str__(self):
        return str(self.id)
    
        
class Service_attacke_package(models.Model):
    attacke = models.OneToOneField(Attack,on_delete=models.CASCADE,verbose_name='attack',null=True,blank=True)
    Package = models.OneToOneField(Package,on_delete=models.CASCADE,verbose_name='package',null=True,blank=True)
    service = models.OneToOneField(Service,on_delete=models.CASCADE,verbose_name='service',null=False,blank=False)
    class Meta:
        verbose_name = 'service_attacke_package'
        verbose_name_plural = 'services_attackes_packages'
    
    def __str__(self):
        return str(self.id)
    








