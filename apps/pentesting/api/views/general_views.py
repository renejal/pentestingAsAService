from django import http
from django.db import reset_queries
from rest_framework import generics, serializers
from rest_framework import response
from rest_framework.views import APIView
from apps.pentesting.models import Attack
from apps.pentesting.api.serializer.general_serializer import *
from django.http import HttpResponse
from rest_framework.response import Response
from django.http import JsonResponse
from rest_framework import status
from apps.pentesting.api.serializer.general_serializer import CategorySerializer


class AttackListAPIViews(generics.ListAPIView):

   serializer_class = attackSerializer
   def get_queryset(self):
       Result= Attack.objects.filter(state=True)
       return Result

class AttackCreateApiViews(generics.GenericAPIView):
    serializer_class = attackSerializer
    def post(self,request,*args, **kwargs):
        serializer = self.get_serializer(data = request.data)
        if serializer.is_valid():
            attack = serializer.save()
            return Response(serializer.data, status = status.HTTP_201_CREATED)
        return Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST)



class AttackUpdateApiViews(generics.UpdateAPIView):
    serializer_class = attackSerializer
    queryset = Attack.objects.all()

class AttackDeleteApiViews(generics.DestroyAPIView):
    serializer_class = attackSerializer
    queryset = Attack.objects.all()
    

#crud for category

class CategoryListAPIViews(generics.ListAPIView):

   serializer_class = CategorySerializer
   def get_queryset(self):
       Result= Category.objects.filter(state=True)
       return Result

class CategoryCreateApiViews(generics.CreateAPIView):
    serializer_class=CategorySerializer
    reset_queries = Category.objects.all()

class CategoryUpdateApiViews(generics.UpdateAPIView):
    serializer_class = CategorySerializer
    queryset = Attack.objects.all()

class CategoryDeleteApiViews(generics.DestroyAPIView):
    serializer_class = CategorySerializer
    queryset = Attack.objects.all()
    
#reports the category

class CategoryListSearchIdAPIViws(APIView):
    def get(self,request,*args, **kwargs):
        queryset = Category.objects.filter(id=kwargs['pk'])
        return Response({"Category": CategorySerializer(queryset, many=True).data })
        