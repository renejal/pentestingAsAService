from apps.shopping.models import Service
from django import http
from django.db import reset_queries
from django.db.models import query_utils
from django.db.models.query import QuerySet
from rest_framework import generics, serializers
from rest_framework import response
from rest_framework.views import APIView
from apps.pentesting.models import Attack
from apps.pentesting.api.serializer.general_serializer import *
from django.http import HttpResponse
from rest_framework.response import Response
from django.http import JsonResponse
from rest_framework import status
from apps.pentesting.api.serializer.general_serializer import CategorySerializer,PackageSerializer


class AttackListAPIViews(generics.ListAPIView):

   serializer_class = attackSerializer
   def get_queryset(self):
       Result= Attack.objects.filter(state=True)
       return Result

class AttackListAllAPIViews(generics.ListAPIView):

   serializer_class = attackSerializer
   def get_queryset(self):
       Result= Attack.objects.filter()
       return Result

class AttackCreateApiViews(generics.GenericAPIView):
    serializer_class = attackSerializer
    def post(self,request,*args, **kwargs):
        serializer = self.get_serializer(data = request.data)
        if serializer.is_valid():
            #attack = serializer.save(service = Service.objects.create())
            Service.objects.create(attack = serializer.save())

            return Response(serializer.data, status = status.HTTP_201_CREATED)
        return Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST)
   
class AttackUpdateApiViews(generics.UpdateAPIView):
    serializer_class = attackSerializer
    queryset = Attack.objects.all()

class AttackDeleteApiViews(generics.DestroyAPIView):
    serializer_class = attackSerializer
    #queryset = Attack.objects.all()

    def get_queryset(self):
        return self.get_serializer().Meta.model.objects.filter(state = True)      
    def delete(self,request,pk=None):
        attack = self.get_queryset().filter(id=pk).first()
        if attack:
            attack.state = False
            attack.save()
            return Response({'message':'attack successfully removed'},status = status.HTTP_200_OK)
        return Response({'message':'attack not found'},status = status.HTTP_400_BAD_REQUEST)
    
#report for attack
class AttackListSearchIdAPIViews(APIView):
    def get(self,request,*args, **kwargs):
        queryset = Attack.objects.filter(id=kwargs['pk'])
        return Response({"Attack": attackSearchSerializer(queryset, many=True).data })
        
#crud for package
class PackageCreateAPIViews(generics.GenericAPIView):
    serializer_class = PackageSerializer
    def post(self,request,*args, **kwargs):
        serializer = self.get_serializer(data = request.data)
        if serializer.is_valid():
            #package = serializer.save(service = Service.objects.create())
            package = serializer.save()
            print(package)
            return Response(serializer.data, status = status.HTTP_201_CREATED)
        return Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST)


class PackageListAPIViews(generics.ListAPIView):

   serializer_class = PackageSerializer
   def get_queryset(self):
       Result= Package.objects.filter(state=True)
       return Result

class PackageListAllAPIViews(generics.ListAPIView):
    
   serializer_class = PackageSerializer
   def get_queryset(self):
       Result= Package.objects.filter()
       return Result

class PackageUpdateApiViews(generics.UpdateAPIView):
    serializer_class = PackageSerializer
    queryset = Package.objects.all()

class PackageDeleteApiViews(generics.DestroyAPIView):
    serializer_class = PackageSerializer

    def get_queryset(self):
        return self.get_serializer().Meta.model.objects.filter(state = True)      

    def delete(self,request,pk=None):
        Package = self.get_queryset().filter(id=pk).first()
        if Package:
            Package.state = False
            Package.save()
            return Response({'message':'package successfully removed'},status = status.HTTP_200_OK)
        return Response({'message':'package not found'},status = status.HTTP_400_BAD_REQUEST)

#crud for category

class CategoryListAPIViews(generics.ListAPIView):

   serializer_class = CategorySerializer
   def get_queryset(self):
       Result= Category.objects.filter(state=True)
       return Result

class CategoryCreateApiViews(generics.CreateAPIView):
    serializer_class=CategorySerializer
    reset_queries = Category.objects.all()

class CategoryUpdateApiViews(generics.UpdateAPIView):
    serializer_class = CategorySerializer
    queryset = Category.objects.all()

class CategoryDeleteApiViews(generics.DestroyAPIView):
    serializer_class = CategorySerializer
    #queryset = Attack.objects.all()

    def get_queryset(self):
        return self.get_serializer().Meta.model.objects.filter(state = True)

    def delete(self,request,pk=None):
        Package = self.get_queryset().filter(id=pk).first()
        if Package:
            Package.delete()
            return Response({'message':'category successfully removed'},status = status.HTTP_200_OK)
        return Response({'message':'category not found'},status = status.HTTP_400_BAD_REQUEST)
    
#reports the category

class CategoryListSearchIdAPIViews(APIView):
    def get(self,request,*args, **kwargs):
        queryset = Category.objects.filter(id=kwargs['pk'])
        return Response({"Category": CategorySearchSerializer(queryset, many=True).data })


