from apps.pentesting.api.serializer.general_serializer import ServiceSerializer
from copy import error
from decimal import Context
from rest_framework import status
from rest_framework import response
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.decorators import api_view
from apps.pentesting.api.serializer import pentesting_serealizer
from apps.pentesting.models import Attack
"""
@api_view(['POST'])
def service_api_view(request):
    #create 
    if  request.method == 'POST':
        user_serializer = ServiceSerializer(data = request.data)
        if user_serializer.is_valid():
            user_serializer.save()
            return Response({'message':'user create'},status=status.HTTP_201_CREATED)
        return Response(user_serializer.errors,status=status.HTTP_400_BAD_REQUEST)
        """