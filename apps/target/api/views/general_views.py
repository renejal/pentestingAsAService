from django.db.models import query_utils
from apps.target.models import Target,Server
from rest_framework import generics, serializers
from apps.target.api.serializers.genera_serializer import ServerSerializer,TargetSerializer
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from apps.users.authentication_mixins import Authentication
#end-point sever
class ServerCreateApiView(generics.GenericAPIView):
    serializer_class = ServerSerializer 
    def post(self,request,*args, **kwargs):
        serializer = self.get_serializer(data = request.data)
        if serializer.is_valid():
            instanceServer= serializer.save()
            instanceServer=Server.objects.create(server=instanceServer)
            serializer.save()
            return Response(serializer.data, status = status.HTTP_201_CREATED)
        return Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST)
        
class ServerListSearchIdAPIViews(APIView):
    def get(self,request,*args, **kwargs):
        queryset = Server.objects.filter(id=kwargs['pk'])
        return Response({"Server": ServerSerializer(queryset, many=True).data })

class ServerListAllAPIViews(generics.ListAPIView):
   serializer_class = ServerSerializer
   def get_queryset(self):
       Result= Server.objects.filter()
       return Result

class ServerUpdateApiViews(generics.UpdateAPIView):
    serializer_class =ServerSerializer
    queryset = Server.objects.all()
   
class ServerDeleteApiViews(generics.DestroyAPIView):
    serializer_class = ServerSerializer 
    def delete(self,request,pk=None):
        server= self.get_queryset().filter(id=pk).first()
        if server:
            server.delete()
            return Response({'message':'server successfully removed'},status = status.HTTP_200_OK)
        return Response({'message':'server not found'},status = status.HTTP_400_BAD_REQUEST)
 
#end point Target
class TargetCreateApiView(generics.GenericAPIView):
    serializer_class =TargetSerializer 
    def post(self,request,*args, **kwargs):
        serializer = self.get_serializer(data = request.data)
        if serializer.is_valid():
            instanceTarget= serializer.save()
            instanceTarget=Target.objects.create(target=instanceTarget)
            serializer.save()
            return Response(serializer.data, status = status.HTTP_201_CREATED)
        return Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST)
    
class TargetListSearchIdAPIViews(APIView):
    def get(self,request,*args, **kwargs):
        queryset = Target.objects.filter(id=kwargs['pk'])
        return Response({"Target": TargetSerializer(queryset, many=True).data })

class TargetListAllAPIViews(generics.ListAPIView):
   serializer_class =TargetSerializer
   def get_queryset(self):
       Result= Target.objects.filter()
       return Result

class TargetUpdateApiViews(generics.UpdateAPIView):
    serializer_class =TargetSerializer
    queryset = Target.objects.all()
    
class TargetDeleteApiViews(generics.DestroyAPIView):
    serializer_class = TargetSerializer 
    def delete(self,request,pk=None):
        target= self.get_queryset().filter(id=pk).first()
        if target:
            target.delete()
            return Response({'message':'target successfully removed'},status = status.HTTP_200_OK)
        return Response({'message':'target not found'},status = status.HTTP_400_BAD_REQUEST)
 