from apps import shopping
from apps.pentesting.models import Package
from rest_framework.views import APIView
from apps.shopping.models import Service, ShoppinCart,Attack,Package
from apps.shopping.api.serializers.serializer import ShoppingCartSerializers,ShoopingCartAddSerializers
from rest_framework import generics
from rest_framework.response import Response
from rest_framework import status
from django.db.models import Sum


class ShoppinCartListApiView(generics.ListAPIView):
    serializer_class = ShoppingCartSerializers
    def get(self, request, *args, **kwargs):
        queryset= ShoppinCart.objects.filter(state=True,users=1) #todo: filtrar por usuairo 
        result =ShoppingCartSerializers(queryset, many=True).data
        s=0
        for i in result: s = s + i.get('price')
        result.append({'total_price':s},)
        print("holla",result)
        return Response({"shopping":result})
    

class ShoppinCartDeleteApiView(generics.DestroyAPIView):
    serializer_class = ShoppingCartSerializers
    def get_queryset(self):
        return self.get_serializer().Meta.model.objects.filter(state = True)

class ShoopinCartCreateApiView(generics.GenericAPIView):
    serializer_class = ShoopingCartAddSerializers
    def post(self,request,*args, **kwargs):
        queryset = ShoppinCart.objects.filter(users = request.data.get('users'),state = True,services = request.data.get('services'))
        if not queryset:
            serializer = self.get_serializer(data = request.data)
            if serializer.is_valid():
                serializer.save()
                return Response({'message': 'Service add shoppingCart'}, status = status.HTTP_201_CREATED)
        return Response({'message': 'The service is already in the shopping cart'},status = status.HTTP_400_BAD_REQUEST)
