from apps.users.models import User
from django.db import reset_queries
from apps import shopping
from apps.pentesting.models import Package
from rest_framework.views import APIView
from apps.shopping.models import Service, ShoppinCart,Attack,Package,Invoce
from apps.shopping.api.serializers.serializer import ShoppingCartSerializers,ShoopingCartAddSerializers,InvoceSerializers
from rest_framework import generics
from rest_framework.response import Response
from rest_framework import status
from django.db.models import Sum


class ShoppinCartListApiView(generics.ListAPIView):
    serializer_class = ShoppingCartSerializers
    def get(self, request, *args, **kwargs):
        queryset= ShoppinCart.objects.filter(state=True,users=1) #todo: filtrar por usuairo 
        result =ShoppingCartSerializers(queryset, many=True).data
        s=0
        for i in result: s = s + i.get('price')
        result.append({'total_price':s},)
        return Response({"shopping":result})
    

class ShoppinCartDeleteApiView(generics.DestroyAPIView):
    serializer_class = ShoppingCartSerializers
    def get_queryset(self):
        return self.get_serializer().Meta.model.objects.filter(state = True)
    def delete(self,request,pk=None):
        attack = self.get_queryset().filter(id=pk).first()
        if attack:
            attack.delete()
            return Response({'message':'Service successfully removed'},status = status.HTTP_200_OK)
        return Response({'message':'Service not found'},status = status.HTTP_400_BAD_REQUEST)
    

class ShoopinCartCreateApiView(generics.GenericAPIView):
    serializer_class = ShoopingCartAddSerializers
    def post(self,request,*args, **kwargs):
        queryset = ShoppinCart.objects.filter(users = request.data.get('users'),state = True,services = request.data.get('services'))
        if not queryset:
            serializer = self.get_serializer(data = request.data)
            if serializer.is_valid():
                serializer.save()
                return Response({'message': 'Service add shoppingCart'}, status = status.HTTP_201_CREATED)
            if serializer:
                return Response({'message': 'The service not found'}, status = status.HTTP_201_CREATED)
        return Response({'message': 'The service is already in the shopping cart'},status = status.HTTP_400_BAD_REQUEST)

class invoceCreateApiView(generics.CreateAPIView):
    serializer_class = InvoceSerializers
    ##todo: validad si hay datos de target -> user = 1

    #1: pasar item de shoppincart a invoce
    #1.1 consulltar los comprar poru user logeado y pasarselos a invoce
    def post(self, request, *args, **kwargs):
        queryset = ShoppinCart.objects.filter(User = 1,state = True)
        if not queryset:
            print(queryset.values())
            serializer = self.get_serializer(data = request.data)
            if serializer.is_valid():
                serializer.save()
        return Response({'message': 'Add service to the shooping cart'},status = status.HTTP_400_BAD_REQUEST)
        


        